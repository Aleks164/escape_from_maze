{"version":3,"file":"993.js","mappings":"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","sources":["webpack://maze/./src/app/constants.ts","webpack://maze/./src/app/generateMaze/getRandomBorderPosition.ts","webpack://maze/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://maze/./src/app/generateMaze/breakNaighborWall.ts","webpack://maze/./src/app/generateMaze/getEmptyNeighbor.ts","webpack://maze/./src/app/findExit/getItemClass.ts","webpack://maze/./src/app/findExit/getNewMazeParams.ts","webpack://maze/./src/app/findExit/getMazeMarkup.ts","webpack://maze/./src/app/generateMaze/index.ts","webpack://maze/./src/app/generateMaze/getNextCellCoord.ts","webpack://maze/./src/app/generateMaze/createMazePatternBySize.ts","webpack://maze/./src/mazeGeneratorWW.ts"],"sourcesContent":["export enum MESSAGE_TYPES {\n  DRAW_ESCAPING = \"drawEscaping\",\n  DRAW_NEW_MAZE = \"drawNewMaze\",\n}\n","export function getRandomBorderPosition(heightWithBorder: number) {\n  let position = Math.ceil(Math.random() * heightWithBorder);\n  if (position % 2 === 0) position++;\n  if (position === 0) position++;\n  if (position >= heightWithBorder) position = heightWithBorder - 2;\n  return position;\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { CoordType } from \"../types\";\n\nexport function brakeNaighborWall(\n  mazeMap: string[][],\n  curCell: CoordType,\n  nextCell: CoordType\n) {\n  const [y, x] = curCell;\n  if (curCell[0] > nextCell[0] && mazeMap[y - 1]) {\n    mazeMap[y - 1][x] = \" \";\n  }\n  if (curCell[0] < nextCell[0] && mazeMap[y + 1]) {\n    mazeMap[y + 1][x] = \" \";\n  }\n  if (curCell[1] > nextCell[1] && mazeMap[y][x - 1]) {\n    mazeMap[y][x - 1] = \" \";\n  }\n  if (curCell[1] < nextCell[1] && mazeMap[y][x + 1]) {\n    mazeMap[y][x + 1] = \" \";\n  }\n  return mazeMap;\n}\n","import { CoordType } from \"../../types\";\n\nexport function getEmptyNeighbor(arr: string[][], curCell: CoordType) {\n  const [y, x] = curCell;\n  const result: [number, number][] = [];\n  if (\n    arr[y + 2] &&\n    arr[y + 2][x] === \" \" &&\n    y + 2 !== arr.length - 1 &&\n    y + 2 !== 0\n  ) {\n    result.push([y + 2, x]);\n  }\n  if (\n    arr[y - 2] &&\n    arr[y - 2][x] === \" \" &&\n    y - 2 !== arr.length - 1 &&\n    y - 2 !== 0\n  ) {\n    result.push([y - 2, x]);\n  }\n  if (\n    arr[y][x + 2] &&\n    arr[y][x + 2] === \" \" &&\n    x + 2 !== arr[y].length - 1 &&\n    x + 2 !== 0\n  ) {\n    result.push([y, x + 2]);\n  }\n  if (\n    arr[y][x - 2] &&\n    arr[y][x - 2] === \" \" &&\n    x - 2 !== arr[y].length - 1 &&\n    x - 2 !== 0\n  ) {\n    result.push([y, x - 2]);\n  }\n  return result;\n}\n","export function getItemClass(item: string) {\n  switch (item) {\n    case \"#\": {\n      return \"wall\";\n    }\n    case \"*\": {\n      return \"shortWayColor\";\n    }\n    case \">\":\n    case \"<\":\n    case \"v\":\n    case \"^\": {\n      return \"steps\";\n    }\n    case \"horizontal\": {\n      return \"horizontal\";\n    }\n    case \"vertical\": {\n      return \"vertical\";\n    }\n    default:\n      return \"empty\";\n  }\n}\n","import { createMazePatternBySize } from \"../generateMaze/createMazePatternBySize\";\nimport { mazeGenerator } from \"../generateMaze\";\nimport { MapType, NewMazeParamType } from \"../../types\";\nimport { getMazeMarkup } from \"./getMazeMarkup\";\n\nexport function getNewMazeParams(\n  height: number,\n  wight: number\n): NewMazeParamType {\n  const startMaze = mazeGenerator(createMazePatternBySize(height, wight));\n\n  const newMaze: MapType = self.structuredClone(startMaze);\n  return { newMaze, mazeMarkup: getMazeMarkup(startMaze) };\n}\n","import { getItemClass } from \"./getItemClass\";\n\nexport function getMazeMarkup(arr: string[]) {\n  return `<div class=\"mazeRow\"><div class=\"mazeRow\" style=\"grid-template-columns: repeat(${\n    arr[0].length + 1\n  },15px); \">\n  ${Array(arr[0].length)\n    .fill(0)\n    .map((_, columnNumber) => {\n      let emptyCell = \"\";\n      if (columnNumber === 0) emptyCell = \"<div> </div>\";\n      return `${emptyCell}<div  class=${getItemClass(\"vertical\")}>${\n        columnNumber + 1\n      }</div>`;\n    })\n    .join(\"\")}</div>\n  ${arr\n    .map(\n      (row, rowNumber) =>\n        `<div class=\"mazeRow\" style=\"grid-template-columns: repeat(${\n          arr[0].length + 1\n        },15px); \">${row\n          .split(\"\")\n          .map((el, coloumnNumber) => {\n            let numbers = \"\";\n            if (coloumnNumber === 0)\n              numbers = `<div class=${getItemClass(\"horizontal\")}>${\n                rowNumber + 1\n              }</div>`;\n            return `${numbers}<div class=${getItemClass(el)}>${\n              el || \".\"\n            }</div>`;\n          })\n          .join(\"\")}</div>`\n    )\n    .join(\"\")}</div>`;\n}\n","import { brakeNaighborWall } from \"./breakNaighborWall\";\nimport { getNextCellCoord } from \"./getNextCellCoord\";\nimport { getEmptyNeighbor } from \"./getEmptyNeighbor\";\nimport { getRandomBorderPosition } from \"./getRandomBorderPosition\";\nimport { CoordType } from \"../../types\";\n\nexport function mazeGenerator(arr: string[][]) {\n  const startCell: CoordType = [1, 1];\n  let curCell = startCell;\n  const cellsWithEmptyNeighborStack = [startCell];\n  while (cellsWithEmptyNeighborStack.length) {\n    arr[curCell[0]][curCell[1]] = \"*\";\n    const emptyNeighbors = getEmptyNeighbor(arr, curCell);\n    if (emptyNeighbors.length === 0) {\n      curCell = cellsWithEmptyNeighborStack.shift()!;\n      // eslint-disable-next-line no-continue\n      continue;\n    } else if (emptyNeighbors.length > 1) {\n      cellsWithEmptyNeighborStack.push(curCell);\n    }\n\n    const nextCell = getNextCellCoord(emptyNeighbors);\n    brakeNaighborWall(arr, curCell, nextCell);\n    curCell = nextCell;\n  }\n  const start = getRandomBorderPosition(arr.length);\n  arr[start][1] = \">\";\n  const resultArr = arr.map((el) => el.join(\"\").replaceAll(\"*\", \" \"));\n  return resultArr;\n}\n","import { CoordType } from \"../../types\";\n\nexport function getNextCellCoord(variants: CoordType[]) {\n  const variantsLength = variants.length;\n  const rndmVariants = Math.floor(Math.random() * variantsLength);\n  return variants[rndmVariants];\n}\n","import { getRandomBorderPosition } from \"./getRandomBorderPosition\";\n\nexport function createMazePatternBySize(width: number, height: number) {\n  const widthWithBorder = width * 2 + 1;\n  const heightWithBorder = height * 2 + 1;\n  let rowsArray = Array(heightWithBorder).fill(\"\");\n\n  const end = getRandomBorderPosition(heightWithBorder);\n  rowsArray = rowsArray.map((_, i, arr) => {\n    if (i === 0 || i === arr.length - 1 || i % 2 === 0)\n      return Array(widthWithBorder).fill(\"#\");\n\n    return Array(widthWithBorder)\n      .fill(\" \")\n      .map((col, index, arrCol) => {\n        if (i === end && index === widthWithBorder - 1) return \" \";\n        if (index % 2 === 0 || index === 0 || index === arrCol.length - 1)\n          return \"#\";\n        return `${col}`;\n      });\n  });\n  return rowsArray;\n}\n","import { MESSAGE_TYPES } from \"./app/constants\";\nimport { getNewMazeParams } from \"./app/findExit/getNewMazeParams\";\n\nself.onmessage = ({ data: { mazeParams, type } }) => {\n  console.log(mazeParams);\n  switch (type) {\n    case MESSAGE_TYPES.DRAW_NEW_MAZE: {\n      const { height, width } = mazeParams;\n      const { mazeMarkup } = getNewMazeParams(height, width);\n      self.postMessage({ mazeMarkup, type });\n      break;\n    }\n    case MESSAGE_TYPES.DRAW_ESCAPING: {\n      const { height, width } = mazeParams;\n      const { newMaze } = getNewMazeParams(height, width);\n      self.postMessage({ newMaze, type });\n      break;\n    }\n    default: {\n      break;\n    }\n  }\n};\n"],"names":["MESSAGE_TYPES","getRandomBorderPosition","heightWithBorder","position","Math","ceil","random","_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","err","o","minLen","n","Object","prototype","toString","slice","constructor","name","from","test","TypeError","brakeNaighborWall","mazeMap","curCell","nextCell","y","x","getEmptyNeighbor","result","getItemClass","item","getNewMazeParams","height","wight","startMaze","variants","variantsLength","startCell","cellsWithEmptyNeighborStack","emptyNeighbors","floor","shift","map","el","join","replaceAll","mazeGenerator","width","widthWithBorder","rowsArray","fill","end","_","col","index","arrCol","createMazePatternBySize","newMaze","self","structuredClone","mazeMarkup","columnNumber","emptyCell","row","rowNumber","split","coloumnNumber","numbers","onmessage","data","mazeParams","type","console","log","DRAW_NEW_MAZE","postMessage","DRAW_ESCAPING"],"sourceRoot":""}