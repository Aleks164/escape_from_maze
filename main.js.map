{"version":3,"file":"main.js","mappings":"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","sources":["webpack://maze/./src/app/generateMaze/getRandomBorderPosition.ts","webpack://maze/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://maze/./src/app/generateMaze/breakNaighborWall.ts","webpack://maze/./src/app/generateMaze/getEmptyNeighbor.ts","webpack://maze/./src/app/findExit/getItemClass.ts","webpack://maze/./src/app/findExit/getMazeMarkup.ts","webpack://maze/./src/app/drawNewMaze.ts","webpack://maze/./src/app/findExit/getNewMazeParams.ts","webpack://maze/./src/app/generateMaze/index.ts","webpack://maze/./src/app/generateMaze/getNextCellCoord.ts","webpack://maze/./src/app/generateMaze/createMazePatternBySize.ts","webpack://maze/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://maze/./src/app/findExit/insertNextDirectionInMap.ts","webpack://maze/./src/app/findExit/index.ts","webpack://maze/./src/app/findExit/calcCrossCoord.ts","webpack://maze/./src/app/findExit/doStep.ts","webpack://maze/./src/app/findExit/checkAround.ts","webpack://maze/./src/app/findExit/getNextStepDirection.ts","webpack://maze/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://maze/./src/index.ts","webpack://maze/./src/app/startEscaping.ts","webpack://maze/./src/app/findExit/getStartPosition.ts","webpack://maze/./src/app/findExit/getStartParams.ts","webpack://maze/./src/app/findExit/drawShortWay.ts","webpack://maze/./src/app/findExit/calcShortWay.ts"],"sourcesContent":["export function getRandomBorderPosition(heightWithBorder: number) {\n  let position = Math.ceil(Math.random() * heightWithBorder);\n  if (position % 2 === 0) position++;\n  if (position === 0) position++;\n  if (position >= heightWithBorder) position = heightWithBorder - 2;\n  return position;\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { CoordType } from \"../types\";\n\nexport function brakeNaighborWall(\n  mazeMap: string[][],\n  curCell: CoordType,\n  nextCell: CoordType\n) {\n  const [y, x] = curCell;\n  if (curCell[0] > nextCell[0] && mazeMap[y - 1]) {\n    mazeMap[y - 1][x] = \" \";\n  }\n  if (curCell[0] < nextCell[0] && mazeMap[y + 1]) {\n    mazeMap[y + 1][x] = \" \";\n  }\n  if (curCell[1] > nextCell[1] && mazeMap[y][x - 1]) {\n    mazeMap[y][x - 1] = \" \";\n  }\n  if (curCell[1] < nextCell[1] && mazeMap[y][x + 1]) {\n    mazeMap[y][x + 1] = \" \";\n  }\n  return mazeMap;\n}\n","import { CoordType } from \"../types\";\n\nexport function getEmptyNeighbor(arr: string[][], curCell: CoordType) {\n  const [y, x] = curCell;\n  const result: [number, number][] = [];\n  if (\n    arr[y + 2] &&\n    arr[y + 2][x] === \" \" &&\n    y + 2 !== arr.length - 1 &&\n    y + 2 !== 0\n  ) {\n    result.push([y + 2, x]);\n  }\n  if (\n    arr[y - 2] &&\n    arr[y - 2][x] === \" \" &&\n    y - 2 !== arr.length - 1 &&\n    y - 2 !== 0\n  ) {\n    result.push([y - 2, x]);\n  }\n  if (\n    arr[y][x + 2] &&\n    arr[y][x + 2] === \" \" &&\n    x + 2 !== arr[y].length - 1 &&\n    x + 2 !== 0\n  ) {\n    result.push([y, x + 2]);\n  }\n  if (\n    arr[y][x - 2] &&\n    arr[y][x - 2] === \" \" &&\n    x - 2 !== arr[y].length - 1 &&\n    x - 2 !== 0\n  ) {\n    result.push([y, x - 2]);\n  }\n  return result;\n}\n","export function getItemClass(item: string) {\n  switch (item) {\n    case \"#\": {\n      return \"wall\";\n    }\n    case \"*\": {\n      return \"shortWayColor\";\n    }\n    case \">\":\n    case \"<\":\n    case \"v\":\n    case \"^\": {\n      return \"steps\";\n    }\n    case \"horizontal\": {\n      return \"horizontal\";\n    }\n    case \"vertical\": {\n      return \"vertical\";\n    }\n    default:\n      return \"empty\";\n  }\n}\n","import { getItemClass } from \"./getItemClass\";\n\nexport function getMazeMarkup(arr: string[]) {\n  return `<div class=\"mazeRow\"><div class=\"mazeRow\" style=\"grid-template-columns: repeat(${\n    arr[0].length + 1\n  },15px); \">\n  ${Array(arr[0].length)\n    .fill(0)\n    .map((_, columnNumber) => {\n      let emptyCell = \"\";\n      if (columnNumber === 0) emptyCell = \"<div> </div>\";\n      return `${emptyCell}<div  class=${getItemClass(\"vertical\")}>${\n        columnNumber + 1\n      }</div>`;\n    })\n    .join(\"\")}</div>\n  ${arr\n    .map(\n      (row, rowNumber) =>\n        `<div class=\"mazeRow\" style=\"grid-template-columns: repeat(${\n          arr[0].length + 1\n        },15px); \">${row\n          .split(\"\")\n          .map((el, coloumnNumber) => {\n            let numbers = \"\";\n            if (coloumnNumber === 0)\n              numbers = `<div class=${getItemClass(\"horizontal\")}>${\n                rowNumber + 1\n              }</div>`;\n            return `${numbers}<div class=${getItemClass(el)}>${\n              el || \".\"\n            }</div>`;\n          })\n          .join(\"\")}</div>`\n    )\n    .join(\"\")}</div>`;\n}\n","import { getNewMazeParams } from \"./findExit/getNewMazeParams\";\nimport { MapType } from \"../types\";\n\nexport function drawNewMaze(mazeContainer: HTMLDivElement) {\n  const inputHeigth = <HTMLInputElement>document.getElementById(\"heigth\");\n  const inputWidth = <HTMLInputElement>document.getElementById(\"width\");\n  const currenSizeButton = <HTMLDivElement>(\n    document.getElementById(\"currenSize\")\n  );\n\n  const height = +inputHeigth.value;\n  const width = +inputWidth.value;\n\n  currenSizeButton.innerHTML = `height: ${height} x width: ${width}`;\n\n  const { newMaze, mazeMarkup } = getNewMazeParams(height, width);\n  const mazeMap: MapType = window.structuredClone(newMaze);\n\n  if (mazeContainer) mazeContainer.innerHTML = mazeMarkup;\n\n  return { mazeMap };\n}\n","import { createMazePatternBySize } from \"../generateMaze/createMazePatternBySize\";\nimport { mazeGenerator } from \"../generateMaze\";\nimport { NewMazeParamType } from \"../../types\";\nimport { getMazeMarkup } from \"./getMazeMarkup\";\n\nexport function getNewMazeParams(\n  height: number,\n  wight: number\n): NewMazeParamType {\n  const startMaze = mazeGenerator(createMazePatternBySize(height, wight));\n  return { newMaze: startMaze, mazeMarkup: getMazeMarkup(startMaze) };\n}\n","import { brakeNaighborWall } from \"./breakNaighborWall\";\nimport { getNextCellCoord } from \"./getNextCellCoord\";\nimport { getEmptyNeighbor } from \"./getEmptyNeighbor\";\nimport { getRandomBorderPosition } from \"./getRandomBorderPosition\";\nimport { CoordType } from \"../../types\";\n\nexport function mazeGenerator(arr: string[][]) {\n  const startCell: CoordType = [1, 1];\n  let curCell = startCell;\n  const cellsWithEmptyNeighborStack = [startCell];\n\n  while (cellsWithEmptyNeighborStack.length) {\n    arr[curCell[0]][curCell[1]] = \"*\";\n    const emptyNeighbors = getEmptyNeighbor(arr, curCell);\n    if (emptyNeighbors.length === 0) {\n      curCell = cellsWithEmptyNeighborStack.shift() as CoordType;\n      // eslint-disable-next-line no-continue\n      continue;\n    } else if (emptyNeighbors.length > 1) {\n      cellsWithEmptyNeighborStack.push(curCell);\n    }\n\n    const nextCell = getNextCellCoord(emptyNeighbors);\n    brakeNaighborWall(arr, curCell, nextCell);\n    curCell = nextCell;\n  }\n  const start = getRandomBorderPosition(arr.length);\n  arr[start][1] = \">\";\n  const resultArr = arr.map((el) => el.join(\"\").replaceAll(\"*\", \" \"));\n  return resultArr;\n}\n","import { CoordType } from \"../../types\";\n\nexport function getNextCellCoord(variants: CoordType[]) {\n  const variantsLength = variants.length;\n  const rndmVariants = Math.floor(Math.random() * variantsLength);\n  return variants[rndmVariants];\n}\n","import { getRandomBorderPosition } from \"./getRandomBorderPosition\";\n\nexport function createMazePatternBySize(width: number, height: number) {\n  const widthWithBorder = width * 2 + 1;\n  const heightWithBorder = height * 2 + 1;\n  let rowsArray = Array(heightWithBorder).fill(\"\");\n\n  const end = getRandomBorderPosition(heightWithBorder);\n  rowsArray = rowsArray.map((_, i, arr) => {\n    if (i === 0 || i === arr.length - 1 || i % 2 === 0)\n      return Array(widthWithBorder).fill(\"#\");\n\n    return Array(widthWithBorder)\n      .fill(\" \")\n      .map((col, index, arrCol) => {\n        if (i === end && index === widthWithBorder - 1) return \" \";\n        if (index % 2 === 0 || index === 0 || index === arrCol.length - 1)\n          return \"#\";\n        return `${col}`;\n      });\n  });\n  return rowsArray;\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export function insertNextDirectionInMap(\n  string: number,\n  coloumn: number,\n  nextDirection: string,\n  arr: string[]\n) {\n  const newRow = arr[string].split(\"\");\n  newRow[coloumn] = nextDirection;\n  arr[string] = newRow.join(\"\");\n}\n","import { doStep } from \"./doStep\";\nimport { calcCrossCoord } from \"./calcCrossCoord\";\nimport { CoordType, DirectionType, MapType, StepParamType } from \"../../types\";\n\nexport function makeOneStep(\n  mazeMap: MapType,\n  currentStepParams: StepParamType\n) {\n  let {\n    startPosition,\n    startDirection,\n    coordList,\n    currentWay,\n    listOfCrosses,\n    prev,\n    isEscaped,\n  } = currentStepParams;\n  const { crossingsParamArray } = currentStepParams;\n  if (isEscaped) return currentStepParams;\n  const { nextStep, nextDirection, resultLOg } = doStep(\n    mazeMap,\n    startDirection,\n    startPosition[0],\n    startPosition[1]\n  );\n  if (\n    startPosition[1] === mazeMap[0].length - 1 ||\n    startPosition[0] === mazeMap.length - 1 ||\n    startPosition[0] === 0 ||\n    startPosition[1] === 0\n  ) {\n    currentWay = currentWay.concat(resultLOg);\n    coordList.push([startPosition[0], startPosition[1]]);\n    crossingsParamArray.push({\n      [startPosition.toString()]: {\n        way: currentWay,\n        from: prev,\n        coord: coordList,\n      },\n    });\n    isEscaped = true;\n    return {\n      ...currentStepParams,\n      coordList,\n      currentWay,\n      crossingsParamArray,\n      isEscaped,\n    };\n  }\n  if (nextStep.length > 1 && typeof nextStep !== \"string\") {\n    coordList.push([startPosition[0], startPosition[1]]);\n    const restCrosses = nextStep.splice(1, nextStep.length - 1);\n    listOfCrosses = listOfCrosses.concat(restCrosses);\n    crossingsParamArray.push({\n      [startPosition.toString()]: {\n        way: currentWay,\n        from: prev,\n        coord: coordList,\n      },\n    });\n    currentWay = [];\n    coordList = [];\n    prev = startPosition.toString();\n  }\n  currentWay = currentWay.concat(resultLOg);\n\n  if (nextStep.length) {\n    coordList.push([startPosition[0], startPosition[1]]);\n    startPosition = nextStep[0] as CoordType;\n    startDirection = nextDirection;\n  } else {\n    const crossing = listOfCrosses.shift();\n    coordList = [];\n    if (crossing) {\n      startPosition = crossing;\n      startDirection = mazeMap[crossing[0]][crossing[1]] as DirectionType;\n      prev = calcCrossCoord(startDirection, startPosition).toString();\n    }\n    currentWay = [startDirection];\n  }\n  return {\n    startPosition,\n    startDirection,\n    coordList,\n    currentWay,\n    listOfCrosses,\n    crossingsParamArray,\n    prev,\n    isEscaped,\n  };\n}\n","import { CoordType, DirectionType } from \"../../types\";\n\nexport function calcCrossCoord(direction: DirectionType, coord: CoordType) {\n  let resultCoord: CoordType[] = [];\n  const x = coord[1];\n  const y = coord[0];\n  if (direction === \">\") {\n    resultCoord = resultCoord.concat([y, x - 1]);\n  }\n  if (direction === \"<\") {\n    resultCoord = resultCoord.concat([y, x + 1]);\n  }\n  if (direction === \"^\") {\n    resultCoord = resultCoord.concat([y + 1, x]);\n  }\n  if (direction === \"v\") {\n    resultCoord = resultCoord.concat([y - 1, x]);\n  }\n  return resultCoord;\n}\n","import { DirectionType, MapType } from \"../../types\";\nimport { checkAround } from \"./checkAround\";\nimport { getNextStepDirection } from \"./getNextStepDirection\";\n\nexport function doStep(\n  mazeMap: MapType,\n  curDirecation: DirectionType,\n  y: number,\n  x: number\n) {\n  const check = checkAround(y, x, mazeMap);\n  if (!check.length)\n    return {\n      nextStep: [],\n      nextDirection: \"\" as DirectionType,\n      resultLOg: [],\n    };\n  const [nextY, nextX] = check[0];\n  const { nextDirection, resultLOg } = getNextStepDirection(\n    [y, x],\n    [nextY, nextX],\n    curDirecation\n  );\n  return {\n    nextStep: check,\n    nextDirection,\n    resultLOg,\n  };\n}\n","import { CoordType, MapType } from \"../../types\";\nimport { insertNextDirectionInMap } from \"./insertNextDirectionInMap\";\n\nexport function checkAround(y: number, x: number, mazeMap: MapType) {\n  const emptyWay: CoordType[] = [];\n\n  if (mazeMap[y + 1] && mazeMap[y + 1][x] === \" \") {\n    emptyWay.push([y + 1, x]);\n    insertNextDirectionInMap(y + 1, x, \"v\", mazeMap);\n  }\n  if (mazeMap[y - 1] && mazeMap[y - 1][x] === \" \") {\n    emptyWay.push([y - 1, x]);\n    insertNextDirectionInMap(y - 1, x, \"^\", mazeMap);\n  }\n  if (mazeMap[y][x + 1] === \" \") {\n    emptyWay.push([y, x + 1]);\n    insertNextDirectionInMap(y, x + 1, \">\", mazeMap);\n  }\n  if (mazeMap[y][x - 1] === \" \") {\n    emptyWay.push([y, x - 1]);\n    insertNextDirectionInMap(y, x - 1, \"<\", mazeMap);\n  }\n  return emptyWay;\n}\n","import { CoordType, DirectionType } from \"../../types\";\n\nexport function getNextStepDirection(\n  curPosition: CoordType,\n  NextPosition: CoordType,\n  curDirection: DirectionType\n) {\n  const resultLOg: string[] = [];\n  let nextDirection: DirectionType = \">\";\n  if (curPosition[0] > NextPosition[0]) nextDirection = \"^\"; // top\n  if (curPosition[0] < NextPosition[0]) nextDirection = \"v\"; // bottom\n  if (curPosition[1] > NextPosition[1]) nextDirection = \"<\"; // left\n  if (curPosition[1] < NextPosition[1]) nextDirection = \">\"; // right\n\n  if (curDirection === nextDirection) resultLOg.push(\"F\");\n  else if (curDirection === \">\") {\n    if (nextDirection === \"<\") resultLOg.push(\"B\", \"F\");\n    if (nextDirection === \"^\") resultLOg.push(\"L\", \"F\");\n    if (nextDirection === \"v\") resultLOg.push(\"R\", \"F\");\n  } else if (curDirection === \"<\") {\n    if (nextDirection === \">\") resultLOg.push(\"B\", \"F\");\n    if (nextDirection === \"v\") resultLOg.push(\"L\", \"F\");\n    if (nextDirection === \"^\") resultLOg.push(\"R\", \"F\");\n  } else if (curDirection === \"v\") {\n    if (nextDirection === \"^\") resultLOg.push(\"B\", \"F\");\n    if (nextDirection === \"<\") resultLOg.push(\"R\", \"F\");\n    if (nextDirection === \">\") resultLOg.push(\"L\", \"F\");\n  } else if (curDirection === \"^\") {\n    if (nextDirection === \"v\") resultLOg.push(\"B\", \"F\");\n    if (nextDirection === \">\") resultLOg.push(\"R\", \"F\");\n    if (nextDirection === \"<\") resultLOg.push(\"L\", \"F\");\n  }\n  return { nextDirection, resultLOg };\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { drawNewMaze } from \"./app/drawNewMaze\";\nimport { startEscaping } from \"./app/startEscaping\";\nimport \"./style.css\";\n\nconst startButton = <HTMLButtonElement>document.getElementById(\"start\");\nconst generateNewMazeButton = <HTMLButtonElement>(\n  document.getElementById(\"generateNewMaze\")\n);\nconst mazeContainer = <HTMLDivElement>document.getElementById(\"maze\");\n\nconst worker = new Worker(\"mazeGeneratorWW.js\");\n\nworker.onmessage = function ww(event) {\n  console.log(event);\n};\nworker.postMessage(\"ali\");\n\nlet { mazeMap } = drawNewMaze(mazeContainer);\n\ngenerateNewMazeButton.addEventListener(\"click\", () => {\n  ({ mazeMap } = drawNewMaze(mazeContainer));\n  startButton.disabled = false;\n});\n\nstartButton.addEventListener(\"click\", () => {\n  startButton.disabled = true;\n  generateNewMazeButton.disabled = true;\n  startEscaping(mazeMap, mazeContainer, generateNewMazeButton);\n});\n","import { makeOneStep } from \"./findExit\";\nimport { drawShortWay } from \"./findExit/drawShortWay\";\nimport { getMazeMarkup } from \"./findExit/getMazeMarkup\";\nimport { getStartParams } from \"./findExit/getStartParams\";\nimport { getStartPosition } from \"./findExit/getStartPosition\";\nimport { MapType, StepParamType } from \"../types\";\n\nexport function startEscaping(\n  mazeMap: MapType,\n  mazeContainer: HTMLDivElement,\n  generateNewMazeButton: HTMLButtonElement\n) {\n  const startParam = getStartPosition(mazeMap);\n  const stepParam = getStartParams();\n  const isEscaped = false;\n  let everyStepParam: StepParamType = {\n    ...startParam,\n    ...stepParam,\n    isEscaped,\n  };\n  while (!everyStepParam.isEscaped) {\n    everyStepParam = makeOneStep(mazeMap, everyStepParam);\n    const curStepMazeMarkup = getMazeMarkup(mazeMap);\n    if (mazeContainer) mazeContainer.innerHTML = curStepMazeMarkup;\n  }\n  if (everyStepParam.isEscaped) {\n    const { crossingsParamArray } = everyStepParam;\n    const startMazeMap = window.structuredClone(mazeMap);\n    drawShortWay(\n      crossingsParamArray,\n      mazeContainer,\n      startMazeMap,\n      generateNewMazeButton\n    );\n  }\n}\n","import { CoordType, DirectionType, MapType } from \"../../types\";\n\nexport function getStartPosition(mazeMap: MapType) {\n  const startVariants = [\"<\", \"^\", \">\", \"v\"];\n  let startPosition: CoordType = [0, 0];\n  let startDirection = \"\" as DirectionType;\n  for (let y = 0; y < mazeMap.length; y++) {\n    for (let x = 0; x < mazeMap[y].length; x++) {\n      if (startVariants.indexOf(mazeMap[y][x]) >= 0) {\n        startPosition = [y, x];\n        startDirection = mazeMap[y][x] as DirectionType;\n        break;\n      }\n      if (startDirection) break;\n    }\n  }\n  return {\n    startPosition,\n    startDirection,\n  };\n}\n","import { StartParamType } from \"../../types\";\n\nexport function getStartParams(): StartParamType;\n\nexport function getStartParams() {\n  return {\n    coordList: [],\n    currentWay: [],\n    listOfCrosses: [],\n    crossingsParamArray: [{ start: { way: [], from: null, coord: [] } }],\n    prev: \"start\",\n  } as StartParamType;\n}\n","import { getMazeMarkup } from \"./getMazeMarkup\";\nimport { calcShortWay } from \"./calcShortWay\";\nimport { CrossesItemType, MapType, CoordType } from \"../../types\";\n\nexport function drawShortWay(\n  crossingsParamArray: CrossesItemType[],\n  mazeEl: HTMLElement | null,\n  startMaze: MapType,\n  generateNewMazeButton: HTMLButtonElement\n) {\n  const rightWay = calcShortWay(crossingsParamArray);\n  const trueWayId = setInterval(() => {\n    if (!rightWay.length) {\n      clearInterval(trueWayId);\n      generateNewMazeButton.disabled = false;\n      return;\n    }\n    const [y, x] = rightWay.shift() as CoordType;\n    const newRow = startMaze[y].split(\"\");\n    newRow[x] = \"*\";\n    startMaze[y] = newRow.join(\"\");\n    const mazeContent = getMazeMarkup(startMaze);\n    if (mazeEl) mazeEl.innerHTML = mazeContent;\n  }, 25);\n}\n","/* eslint-disable no-loop-func */\n/* eslint-disable prefer-destructuring */\nimport { CrossesItemType } from \"../../types\";\n\nexport function calcShortWay(crossesList: CrossesItemType[]) {\n  let lastStep = crossesList.pop() as CrossesItemType;\n  let lastStepKey = Object.keys(lastStep)[0];\n  let prevStepName = lastStep[lastStepKey].from;\n  let prevStepLog = lastStep[lastStepKey].coord;\n  const resultLog = [...prevStepLog];\n  while (prevStepName) {\n    lastStep = crossesList.find((item) => {\n      if (!prevStepName) return false;\n      return item[prevStepName];\n    }) as CrossesItemType;\n    lastStepKey = Object.keys(lastStep)[0];\n    prevStepName = lastStep[lastStepKey].from;\n    prevStepLog = lastStep[lastStepKey].coord;\n    resultLog.unshift(...prevStepLog);\n  }\n  return resultLog;\n}\n"],"names":["getRandomBorderPosition","heightWithBorder","position","Math","ceil","random","_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_slicedToArray","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","next","done","push","value","err","TypeError","brakeNaighborWall","mazeMap","curCell","nextCell","y","x","getEmptyNeighbor","result","getItemClass","item","getMazeMarkup","fill","map","_","columnNumber","emptyCell","join","row","rowNumber","split","el","coloumnNumber","numbers","drawNewMaze","mazeContainer","inputHeigth","document","getElementById","inputWidth","currenSizeButton","height","width","innerHTML","wight","startMaze","variants","variantsLength","startCell","cellsWithEmptyNeighborStack","emptyNeighbors","floor","shift","replaceAll","mazeGenerator","widthWithBorder","rowsArray","end","col","index","arrCol","createMazePatternBySize","newMaze","mazeMarkup","getNewMazeParams","window","structuredClone","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","insertNextDirectionInMap","string","coloumn","nextDirection","newRow","makeOneStep","currentStepParams","startPosition","startDirection","coordList","currentWay","listOfCrosses","prev","isEscaped","crossingsParamArray","direction","coord","resultCoord","curDirecation","check","emptyWay","checkAround","nextStep","resultLOg","curPosition","NextPosition","curDirection","doStep","concat","way","restCrosses","splice","crossing","_toConsumableArray","iter","startButton","generateNewMazeButton","worker","Worker","onmessage","event","console","log","postMessage","addEventListener","disabled","startParam","startVariants","indexOf","getStartPosition","everyStepParam","start","curStepMazeMarkup","mazeEl","rightWay","crossesList","lastStep","pop","lastStepKey","keys","prevStepName","prevStepLog","resultLog","find","unshift","calcShortWay","trueWayId","setInterval","clearInterval","mazeContent","drawShortWay","startEscaping"],"sourceRoot":""}