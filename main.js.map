{"version":3,"file":"main.js","mappings":"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","sources":["webpack://maze/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://maze/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://maze/./src/findExit/insertNextDirectionInMap.ts","webpack://maze/./src/findExit/index.ts","webpack://maze/./src/findExit/calcCrossCoord.ts","webpack://maze/./src/findExit/doStep.ts","webpack://maze/./src/findExit/checkAround.ts","webpack://maze/./src/findExit/getNextStepDirection.ts","webpack://maze/./src/findExit/getItemClass.ts","webpack://maze/./src/findExit/getMazeMarkup.ts","webpack://maze/./src/generateMaze/getRandomBorderPosition.ts","webpack://maze/./src/generateMaze/breakNaighborWall.ts","webpack://maze/./src/generateMaze/getEmptyNeighbor.ts","webpack://maze/./src/findExit/getNewMazeParams.ts","webpack://maze/./src/generateMaze/mazeGenerator.ts","webpack://maze/./src/generateMaze/getNextCellCoord.ts","webpack://maze/./src/generateMaze/createMazePatternBySize.ts","webpack://maze/./src/index.ts","webpack://maze/./src/findExit/drawNewMaze.ts","webpack://maze/./src/findExit/getStartPosition.ts","webpack://maze/./src/findExit/getStartParams.ts"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export function insertNextDirectionInMap(\n  string: number,\n  coloumn: number,\n  nextDirection: string,\n  arr: string[]\n) {\n  const newRow = arr[string].split(\"\");\n  newRow[coloumn] = nextDirection;\n  arr[string] = newRow.join(\"\");\n}\n","import { doStep } from \"./doStep\";\nimport { calcCrossCoord } from \"./calcCrossCoord\";\nimport { CoordType, MapType, StepParamType } from \"../types\";\n\n// let startMaze: MapType;\n// let mazeMap: MapType;\n// let startPosition: CoordType;\n// let startDirection: string;\n// let coordList: CoordType[];\n// let currentWay: string[];\n// let listOfCrosses: CoordType[];\n// let crossingsParamArray: CrossesItemType[];\n// let prev: string;\n// let mazeContent: string;\n// let isEscaped: boolean;\n// getStartParams();\n\nexport function makeOneStep(\n  mazeMap: MapType,\n  currentStepParams: StepParamType\n) {\n  let {\n    startPosition,\n    startDirection,\n    coordList,\n    currentWay,\n    listOfCrosses,\n    prev,\n    isEscaped,\n  } = currentStepParams;\n  const { crossingsParamArray } = currentStepParams;\n  if (isEscaped)\n    return {\n      startPosition,\n      startDirection,\n      coordList,\n      currentWay,\n      listOfCrosses,\n      crossingsParamArray,\n      prev,\n      isEscaped,\n    };\n  const { nextStep, nextDirection, resultLOg } = doStep(\n    mazeMap,\n    startDirection,\n    startPosition[0],\n    startPosition[1]\n  );\n  if (\n    startPosition[1] === mazeMap[0].length - 1 ||\n    startPosition[0] === mazeMap.length - 1 ||\n    startPosition[0] === 0 ||\n    startPosition[1] === 0\n  ) {\n    currentWay = currentWay.concat(resultLOg);\n    coordList.push([startPosition[0], startPosition[1]]);\n    crossingsParamArray.push({\n      [startPosition.toString()]: {\n        way: currentWay,\n        from: prev,\n        coord: coordList,\n      },\n    });\n\n    isEscaped = true;\n    return {\n      startPosition,\n      startDirection,\n      coordList,\n      currentWay,\n      listOfCrosses,\n      crossingsParamArray,\n      prev,\n      isEscaped,\n    };\n  }\n  if (nextStep.length > 1 && typeof nextStep !== \"string\") {\n    coordList.push([startPosition[0], startPosition[1]]);\n    const restCrosses = nextStep.splice(1, nextStep.length - 1);\n    listOfCrosses = listOfCrosses.concat(restCrosses);\n    crossingsParamArray.push({\n      [startPosition.toString()]: {\n        way: currentWay,\n        from: prev,\n        coord: coordList,\n      },\n    });\n    currentWay = [];\n    coordList = [];\n    prev = startPosition.toString();\n  }\n  currentWay = currentWay.concat(resultLOg);\n\n  if (nextStep.length) {\n    coordList.push([startPosition[0], startPosition[1]]);\n    startPosition = nextStep[0] as CoordType;\n    startDirection = nextDirection;\n  } else {\n    const crossing = listOfCrosses.shift();\n    coordList = [];\n    if (crossing) {\n      startPosition = crossing;\n      startDirection = mazeMap[crossing[0]][crossing[1]];\n      prev = calcCrossCoord(startDirection, startPosition).toString();\n    }\n    currentWay = [startDirection];\n  }\n  return {\n    startPosition,\n    startDirection,\n    coordList,\n    currentWay,\n    listOfCrosses,\n    crossingsParamArray,\n    prev,\n    isEscaped,\n  };\n}\n","export function calcCrossCoord(direction: string, coord: [number, number]) {\n  let resultCoord: [number, number][] = [];\n  const x = coord[1];\n  const y = coord[0];\n  if (direction === \">\") {\n    resultCoord = resultCoord.concat([y, x - 1]);\n  }\n  if (direction === \"<\") {\n    resultCoord = resultCoord.concat([y, x + 1]);\n  }\n  if (direction === \"^\") {\n    resultCoord = resultCoord.concat([y + 1, x]);\n  }\n  if (direction === \"v\") {\n    resultCoord = resultCoord.concat([y - 1, x]);\n  }\n  return resultCoord;\n}\n","import { checkAround } from \"./checkAround\";\nimport { getNextStepDirection } from \"./getNextStepDirection\";\n\nexport function doStep(\n  arr: string[],\n  curDirecation: string,\n  y: number,\n  x: number\n) {\n  const check = checkAround(y, x, arr);\n  if (!check.length)\n    return {\n      nextStep: [],\n      nextDirection: \"\",\n      resultLOg: [],\n    };\n  const [nextY, nextX] = check[0];\n  const { nextDirection, resultLOg } = getNextStepDirection(\n    [y, x],\n    [nextY, nextX],\n    curDirecation\n  );\n  return {\n    nextStep: check,\n    nextDirection,\n    resultLOg,\n  };\n}\n","import { insertNextDirectionInMap } from \"./insertNextDirectionInMap\";\n\nexport function checkAround(y: number, x: number, arr: string[]) {\n  const emptyWay: [number, number][] = [];\n\n  if (arr[y + 1] && arr[y + 1][x] === \" \") {\n    emptyWay.push([y + 1, x]);\n    insertNextDirectionInMap(y + 1, x, \"v\", arr);\n  }\n  if (arr[y - 1] && arr[y - 1][x] === \" \") {\n    emptyWay.push([y - 1, x]);\n    insertNextDirectionInMap(y - 1, x, \"^\", arr);\n  }\n  if (arr[y][x + 1] === \" \") {\n    emptyWay.push([y, x + 1]);\n    insertNextDirectionInMap(y, x + 1, \">\", arr);\n  }\n  if (arr[y][x - 1] === \" \") {\n    emptyWay.push([y, x - 1]);\n    insertNextDirectionInMap(y, x - 1, \"<\", arr);\n  }\n  return emptyWay;\n}\n","export function getNextStepDirection(\n  curPosition: [number, number],\n  NextPosition: [number, number],\n  curDirection: string\n) {\n  const resultLOg: string[] = [];\n  let nextDirection = \"\";\n  if (curPosition[0] > NextPosition[0]) nextDirection = \"^\"; // top\n  if (curPosition[0] < NextPosition[0]) nextDirection = \"v\"; // bottom\n  if (curPosition[1] > NextPosition[1]) nextDirection = \"<\"; // left\n  if (curPosition[1] < NextPosition[1]) nextDirection = \">\"; // right\n\n  if (curDirection === nextDirection) resultLOg.push(\"F\");\n  else if (curDirection === \">\") {\n    if (nextDirection === \"<\") resultLOg.push(\"B\", \"F\");\n    if (nextDirection === \"^\") resultLOg.push(\"L\", \"F\");\n    if (nextDirection === \"v\") resultLOg.push(\"R\", \"F\");\n  } else if (curDirection === \"<\") {\n    if (nextDirection === \">\") resultLOg.push(\"B\", \"F\");\n    if (nextDirection === \"v\") resultLOg.push(\"L\", \"F\");\n    if (nextDirection === \"^\") resultLOg.push(\"R\", \"F\");\n  } else if (curDirection === \"v\") {\n    if (nextDirection === \"^\") resultLOg.push(\"B\", \"F\");\n    if (nextDirection === \"<\") resultLOg.push(\"R\", \"F\");\n    if (nextDirection === \">\") resultLOg.push(\"L\", \"F\");\n  } else if (curDirection === \"^\") {\n    if (nextDirection === \"v\") resultLOg.push(\"B\", \"F\");\n    if (nextDirection === \">\") resultLOg.push(\"R\", \"F\");\n    if (nextDirection === \"<\") resultLOg.push(\"L\", \"F\");\n  }\n  return { nextDirection, resultLOg };\n}\n","export function getItemClass(item: string) {\n  switch (item) {\n    case \"#\": {\n      return \"wall\";\n    }\n    case \"*\": {\n      return \"shortWayColor\";\n    }\n    case \">\":\n    case \"<\":\n    case \"v\":\n    case \"^\": {\n      return \"steps\";\n    }\n    case \"horizontal\": {\n      return \"horizontal\";\n    }\n    case \"vertical\": {\n      return \"vertical\";\n    }\n    default:\n      return \"empty\";\n  }\n}\n","import { getItemClass } from \"./getItemClass\";\n\nexport function getMazeMarkup(arr: string[]) {\n  return `<div class=\"mazeRow\"><div class=\"mazeRow\" style=\"grid-template-columns: repeat(${\n    arr[0].length + 1\n  },15px); \">\n  ${Array(arr[0].length)\n    .fill(0)\n    .map((_, columnNumber) => {\n      let emptyCell = \"\";\n      if (columnNumber === 0) emptyCell = \"<div> </div>\";\n      return `${emptyCell}<div  class=${getItemClass(\"vertical\")}>${\n        columnNumber + 1\n      }</div>`;\n    })\n    .join(\"\")}</div>\n  ${arr\n    .map(\n      (row, rowNumber) =>\n        `<div class=\"mazeRow\" style=\"grid-template-columns: repeat(${\n          arr[0].length + 1\n        },15px); \">${row\n          .split(\"\")\n          .map((el, coloumnNumber) => {\n            let numbers = \"\";\n            if (coloumnNumber === 0)\n              numbers = `<div class=${getItemClass(\"horizontal\")}>${\n                rowNumber + 1\n              }</div>`;\n            return `${numbers}<div class=${getItemClass(el)}>${\n              el || \".\"\n            }</div>`;\n          })\n          .join(\"\")}</div>`\n    )\n    .join(\"\")}</div>`;\n}\n","export function getRandomBorderPosition(heightWithBorder: number) {\n  let position = Math.ceil(Math.random() * heightWithBorder);\n  if (position % 2 === 0) position++;\n  if (position === 0) position++;\n  if (position >= heightWithBorder) position = heightWithBorder - 2;\n  return position;\n}\n","export function brakeNaighborWall(\n  arr: string[][],\n  curCell: [number, number],\n  nextCell: [number, number]\n) {\n  const [y, x] = curCell;\n  if (curCell[0] > nextCell[0] && arr[y - 1]) {\n    arr[y - 1][x] = \" \";\n  }\n  if (curCell[0] < nextCell[0] && arr[y + 1]) {\n    arr[y + 1][x] = \" \";\n  }\n  if (curCell[1] > nextCell[1] && arr[y][x - 1]) {\n    arr[y][x - 1] = \" \";\n  }\n  if (curCell[1] < nextCell[1] && arr[y][x + 1]) {\n    arr[y][x + 1] = \" \";\n  }\n  return arr;\n}\n","export function getEmptyNeighbor(arr: string[][], curCell: [number, number]) {\n  const [y, x] = curCell;\n  const result: [number, number][] = [];\n  if (\n    arr[y + 2] &&\n    arr[y + 2][x] === \" \" &&\n    y + 2 !== arr.length - 1 &&\n    y + 2 !== 0\n  ) {\n    result.push([y + 2, x]);\n  }\n  if (\n    arr[y - 2] &&\n    arr[y - 2][x] === \" \" &&\n    y - 2 !== arr.length - 1 &&\n    y - 2 !== 0\n  ) {\n    result.push([y - 2, x]);\n  }\n  if (\n    arr[y][x + 2] &&\n    arr[y][x + 2] === \" \" &&\n    x + 2 !== arr[y].length - 1 &&\n    x + 2 !== 0\n  ) {\n    result.push([y, x + 2]);\n  }\n  if (\n    arr[y][x - 2] &&\n    arr[y][x - 2] === \" \" &&\n    x - 2 !== arr[y].length - 1 &&\n    x - 2 !== 0\n  ) {\n    result.push([y, x - 2]);\n  }\n  return result;\n}\n","import { createMazePatternBySize } from \"../generateMaze/createMazePatternBySize\";\nimport { mazeGenerator } from \"../generateMaze/mazeGenerator\";\nimport { NewMazeParamType } from \"../types\";\nimport { getMazeMarkup } from \"./getMazeMarkup\";\n\nexport function getNewMazeParams(\n  height: number,\n  wight: number\n): NewMazeParamType {\n  const startMaze = mazeGenerator(createMazePatternBySize(height, wight));\n  return { newMaze: startMaze, mazeMarkup: getMazeMarkup(startMaze) };\n}\n","import { brakeNaighborWall } from \"./breakNaighborWall\";\nimport { getNextCellCoord } from \"./getNextCellCoord\";\nimport { getEmptyNeighbor } from \"./getEmptyNeighbor\";\nimport { getRandomBorderPosition } from \"./getRandomBorderPosition\";\n\nexport function mazeGenerator(arr: string[][]) {\n  const startCell: [number, number] = [1, 1];\n  let curCell = startCell;\n  const cellsWithEmptyNeighborStack = [startCell];\n\n  while (cellsWithEmptyNeighborStack.length) {\n    arr[curCell[0]][curCell[1]] = \"*\";\n    const emptyNeighbors = getEmptyNeighbor(arr, curCell);\n    if (emptyNeighbors.length === 0) {\n      curCell = cellsWithEmptyNeighborStack.shift() as [number, number];\n      // eslint-disable-next-line no-continue\n      continue;\n    } else if (emptyNeighbors.length > 1) {\n      cellsWithEmptyNeighborStack.push(curCell);\n    }\n\n    const nextCell = getNextCellCoord(emptyNeighbors);\n    brakeNaighborWall(arr, curCell, nextCell);\n    curCell = nextCell;\n  }\n  const start = getRandomBorderPosition(arr.length);\n  arr[start][1] = \">\";\n  const resultArr = arr.map((el) => el.join(\"\").replaceAll(\"*\", \" \"));\n  return resultArr;\n}\n","export function getNextCellCoord(variants: [number, number][]) {\n  const variantsLength = variants.length;\n  const rndmVariants = Math.floor(Math.random() * variantsLength);\n  return variants[rndmVariants];\n}\n","import { getRandomBorderPosition } from \"./getRandomBorderPosition\";\n\nexport function createMazePatternBySize(width: number, height: number) {\n  const widthWithBorder = width * 2 + 1;\n  const heightWithBorder = height * 2 + 1;\n  let rowsArray = Array(heightWithBorder).fill(\"\");\n\n  const end = getRandomBorderPosition(heightWithBorder);\n  rowsArray = rowsArray.map((_, i, arr) => {\n    if (i === 0 || i === arr.length - 1 || i % 2 === 0)\n      return Array(widthWithBorder).fill(\"#\");\n\n    return Array(widthWithBorder)\n      .fill(\" \")\n      .map((col, index, arrCol) => {\n        if (i === end && index === widthWithBorder - 1) return \" \";\n        if (index % 2 === 0 || index === 0 || index === arrCol.length - 1)\n          return \"#\";\n        return `${col}`;\n      });\n  });\n  return rowsArray;\n}\n","import { makeOneStep } from \"./findExit\";\nimport { drawNewMaze } from \"./findExit/drawNewMaze\";\nimport { drawShortWay } from \"./findExit/drawShortWay\";\nimport { getMazeMarkup } from \"./findExit/getMazeMarkup\";\nimport { getNewMazeParams } from \"./findExit/getNewMazeParams\";\nimport { getStartParams } from \"./findExit/getStartParams\";\nimport { getStartPosition } from \"./findExit/getStartPosition\";\nimport { StepParamType } from \"./types\";\nimport \"./style.css\";\n\nconst inputHeigth = <HTMLInputElement>document.getElementById(\"heigth\");\nconst inputWidth = <HTMLInputElement>document.getElementById(\"width\");\nconst nextStepButton = <HTMLButtonElement>(\n  document.getElementById(\"nextStepButton\")\n);\nconst generateNewMazeButton = <HTMLButtonElement>(\n  document.getElementById(\"generateNewMaze\")\n);\nconst currenSizeButton = <HTMLDivElement>document.getElementById(\"currenSize\");\nconst mazeContainer = <HTMLDivElement>document.getElementById(\"maze\");\n\nconst height = +inputHeigth.value;\nconst width = +inputWidth.value;\nconst { newMaze, mazeMarkup } = getNewMazeParams(height, width);\nlet mazeMap = newMaze;\nif (mazeContainer) mazeContainer.innerHTML = mazeMarkup;\n\ncurrenSizeButton.innerHTML = `height: ${height} x width: ${width}`;\n\ngenerateNewMazeButton.addEventListener(\"click\", () => {\n  const mazeParams = getNewMazeParams(height, width);\n  drawNewMaze(mazeContainer, mazeParams.mazeMarkup);\n  mazeMap = mazeParams.newMaze;\n});\n\nnextStepButton.addEventListener(\"click\", () => {\n  nextStepButton.disabled = true;\n  const startParam = getStartPosition(mazeMap);\n  const stepParam = getStartParams();\n  const isEscaped = false;\n  let everyStepParam: StepParamType = {\n    ...startParam,\n    ...stepParam,\n    isEscaped,\n  };\n  while (!isEscaped) {\n    console.log(everyStepParam.isEscaped);\n\n    everyStepParam = makeOneStep(mazeMap, everyStepParam);\n    const curStepMazeMarkup = getMazeMarkup(mazeMap);\n    if (mazeContainer) mazeContainer.innerHTML = curStepMazeMarkup;\n  }\n  if (isEscaped) {\n    const { crossingsParamArray } = everyStepParam;\n    const startMazeMap = newMaze.slice();\n    drawShortWay(crossingsParamArray, mazeContainer, startMazeMap);\n  }\n  nextStepButton.disabled = false;\n});\n","export function drawNewMaze(mazeContainer: HTMLDivElement, mazeParams: string) {\n  if (mazeContainer) mazeContainer.innerHTML = mazeParams;\n}\n","export function getStartPosition(arr: string[]) {\n  let startX = 0;\n  let startY = 0;\n  const startVariants = [\"<\", \"^\", \">\", \"v\"];\n  let startDirection = \"\";\n  for (let y = 0; y < arr.length; y++) {\n    for (let x = 0; x < arr[y].length; x++) {\n      if (startVariants.indexOf(arr[y][x]) >= 0) {\n        startX = x;\n        startY = y;\n        startDirection = arr[y][x];\n        break;\n      }\n      if (startDirection) break;\n    }\n  }\n\n  return {\n    startPosition: [startY, startX] as [number, number],\n    startDirection,\n  };\n}\n","import { StartParamType } from \"../types\";\n\nexport function getStartParams(): StartParamType;\n\nexport function getStartParams() {\n  return {\n    coordList: [],\n    currentWay: [],\n    listOfCrosses: [],\n    crossingsParamArray: [{ start: { way: [], from: null, coord: [] } }],\n    prev: \"start\",\n  } as StartParamType;\n}\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","o","minLen","n","prototype","toString","slice","constructor","name","from","test","TypeError","insertNextDirectionInMap","string","coloumn","nextDirection","newRow","split","join","makeOneStep","mazeMap","currentStepParams","startPosition","startDirection","coordList","currentWay","listOfCrosses","prev","isEscaped","crossingsParamArray","direction","coord","resultCoord","x","y","curDirecation","check","emptyWay","checkAround","nextStep","resultLOg","curPosition","NextPosition","curDirection","doStep","concat","way","restCrosses","splice","crossing","shift","getItemClass","item","getMazeMarkup","fill","map","_","columnNumber","emptyCell","row","rowNumber","el","coloumnNumber","numbers","getRandomBorderPosition","heightWithBorder","position","Math","ceil","random","brakeNaighborWall","curCell","nextCell","getEmptyNeighbor","result","getNewMazeParams","height","wight","startMaze","variants","variantsLength","startCell","cellsWithEmptyNeighborStack","emptyNeighbors","floor","replaceAll","mazeGenerator","width","widthWithBorder","rowsArray","end","col","index","arrCol","createMazePatternBySize","newMaze","mazeMarkup","inputHeigth","document","getElementById","inputWidth","nextStepButton","generateNewMazeButton","currenSizeButton","mazeContainer","innerHTML","addEventListener","mazeParams","drawNewMaze","disabled","everyStepParam","startX","startY","startVariants","indexOf","getStartPosition","start","console","log","curStepMazeMarkup"],"sourceRoot":""}